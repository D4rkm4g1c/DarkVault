<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/css/bootstrap.min.css">
    <style>
        .flag-card {
            margin-bottom: 15px;
            border-left: 5px solid #dc3545;
            transition: all 0.3s ease;
        }
        .flag-card.completed {
            border-left: 5px solid #28a745;
        }
        .flag-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        .badge-success {
            background-color: #28a745;
            color: white;
        }
        .badge-danger {
            background-color: #dc3545;
            color: white;
        }
        .flag-hint {
            font-size: 0.9rem;
            color: #6c757d;
            margin-top: 10px;
        }
        .progress {
            height: 25px;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <%- include('partials/navbar') %>

    <div class="container mt-5">
        <h2>Flag Tracking Dashboard</h2>
        <p class="lead">Track your progress through exploiting DarkVault's vulnerabilities.</p>
        
        <div class="card mb-4">
            <div class="card-body">
                <h4>Submit Captured Flag</h4>
                <form id="flagForm">
                    <div class="mb-3">
                        <input type="text" id="flagInput" class="form-control" placeholder="Enter flag (format: DARK{flag_value})">
                    </div>
                    <button type="submit" class="btn btn-primary">Verify Flag</button>
                </form>
                <div id="flagResult" class="mt-2"></div>
            </div>
        </div>
        
        <div class="row mb-4">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-body">
                        <h5>Progress</h5>
                        <div class="progress">
                            <div class="progress-bar bg-success" role="progressbar" id="progressBar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
                        </div>
                        <p class="text-center"><span id="completedCount">0</span>/<span id="totalCount"><%= flags.length %></span> flags captured</p>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row">
            <% flags.forEach(function(flag) { %>
                <div class="col-md-6">
                    <div class="card flag-card <%= flag.completed ? 'completed' : '' %>" id="flag-<%= flag.id %>">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center">
                                <h5 class="card-title"><%= flag.name %></h5>
                                <span class="badge <%= flag.completed ? 'badge-success' : 'badge-danger' %>" id="status-<%= flag.id %>">
                                    <%= flag.completed ? 'CAPTURED' : 'NOT CAPTURED' %>
                                </span>
                            </div>
                            <p class="card-text">Exploit the <%= flag.name %> vulnerability to capture this flag.</p>
                            <div class="flag-hint">
                                <strong>Format:</strong> DARK{something_here}
                            </div>
                        </div>
                    </div>
                </div>
            <% }); %>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Flag tracking logic
        $(document).ready(function() {
            // Load saved flags from localStorage
            const savedFlags = JSON.parse(localStorage.getItem('capturedFlags') || '[]');
            let completedCount = savedFlags.length;
            
            // Update UI with saved flags
            savedFlags.forEach(flagId => {
                markFlagAsCaptured(flagId);
            });
            
            // Update progress bar
            updateProgress();
            
            // Flag submission form
            $('#flagForm').submit(function(e) {
                e.preventDefault();
                const flagValue = $('#flagInput').val().trim();
                
                if (!flagValue) {
                    showResult('Please enter a flag', 'danger');
                    return;
                }
                
                // Send flag to server for verification
                $.ajax({
                    url: '/check-flag',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ flag: flagValue }),
                    success: function(response) {
                        if (response.success) {
                            // Extract flag ID
                            const flagId = flagValue.substring(5, flagValue.length - 1);
                            
                            // Check if already captured
                            if (savedFlags.includes(flagId)) {
                                showResult('You have already captured this flag!', 'warning');
                                return;
                            }
                            
                            // Mark flag as captured
                            savedFlags.push(flagId);
                            localStorage.setItem('capturedFlags', JSON.stringify(savedFlags));
                            markFlagAsCaptured(flagId);
                            completedCount++;
                            updateProgress();
                            
                            showResult('Congratulations! Flag captured successfully', 'success');
                            $('#flagInput').val('');
                        } else {
                            showResult('Invalid flag. Try again!', 'danger');
                        }
                    },
                    error: function() {
                        showResult('Error verifying flag. Please try again.', 'danger');
                    }
                });
            });
            
            function markFlagAsCaptured(flagId) {
                const flagCard = $(`#flag-${flagId}`);
                const statusBadge = $(`#status-${flagId}`);
                
                if (flagCard.length) {
                    flagCard.addClass('completed');
                    statusBadge.removeClass('badge-danger').addClass('badge-success');
                    statusBadge.text('CAPTURED');
                }
            }
            
            function updateProgress() {
                const totalFlags = <%= flags.length %>;
                const percentage = Math.round((completedCount / totalFlags) * 100);
                
                $('#progressBar').css('width', percentage + '%');
                $('#progressBar').attr('aria-valuenow', percentage);
                $('#progressBar').text(percentage + '%');
                $('#completedCount').text(completedCount);
            }
            
            function showResult(message, type) {
                $('#flagResult').html(`<div class="alert alert-${type}">${message}</div>`);
                setTimeout(() => {
                    $('#flagResult').html('');
                }, 5000);
            }
        });
    </script>
</body>
</html> 